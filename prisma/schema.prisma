generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                 Int       @id @default(autoincrement())
  email              String    @unique(map: "email") @db.VarChar(255)
  password           String    @db.VarChar(255)
  refresh_token      String?   @db.Text
  two_factor_secret  String?   @db.Text // New field for 2FA secret
  role               String    @default("member") @db.VarChar(50) // New field for role
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
}

model Book {
  id          Int      @id @default(autoincrement())
  user_id     Int
  user        users    @relation(fields: [user_id], references: [id])
  title       String
  description String?  @db.Text
  genre       String?
  status      String?
  created_at  DateTime @default(now()) @db.Timestamp(0)
}

model Chapter {
  id          Int      @id @default(autoincrement())
  book_id     Int
  book        Book     @relation(fields: [book_id], references: [id])
  title       String
  content     String?  @db.Text
  order_index Int      @default(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
}

model Note {
  id            Int      @id @default(autoincrement())
  chapter_id    Int
  chapter       Chapter  @relation(fields: [chapter_id], references: [id])
  content       String   @db.Text
  line_position Int?
  created_at    DateTime @default(now()) @db.Timestamp(0)
}

model Comment {
  id         Int      @id @default(autoincrement())
  chapter_id Int
  chapter    Chapter  @relation(fields: [chapter_id], references: [id])
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
}

model Character {
  id                   Int      @id @default(autoincrement())
  book_id              Int
  book                 Book     @relation(fields: [book_id], references: [id])
  name                 String
  alias                String?
  gender               String?
  age                  Int?
  physical_description String?  @db.Text
  backstory            String?  @db.Text
  role                 String?
  relations            String?  @db.Text
}

enum MapItemType {
  city
  place
  route
}

model MapItem {
  id          Int         @id @default(autoincrement())
  book_id     Int
  book        Book        @relation(fields: [book_id], references: [id])
  type        MapItemType
  name        String
  x           Float
  y           Float
  description String?     @db.Text
}

model Stat {
  id           Int      @id @default(autoincrement())
  book_id      Int      @unique
  book         Book     @relation(fields: [book_id], references: [id])
  word_count   Int      @default(0)
  letter_count Int      @default(0)
  total_goal   Int?
  weekly_goal  Int?
  deadline     DateTime?
}
